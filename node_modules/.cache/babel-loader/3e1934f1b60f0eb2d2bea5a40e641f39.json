{"ast":null,"code":"var _jsxFileName = \"/Users/brandon/Desktop/Thinkful/Projects/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Initialize from \"./Initialize\";\nimport StartStop from \"./StartStop\";\nimport FocusTimer from \"./FocusTimer\";\nimport Progress from \"./Progress\";\n/**\n * main component that represents a Pomodoro Timer\n * @returns {JSX} - <div> element containing all other components\n */\n\nfunction Pomodoro() {\n  const initTimer = {\n    focusTime: 60 * 25,\n    focusTimeLeft: 60 * 25,\n    focusTimeFloor: 60 * 5,\n    focusTimeRoof: 60 * 60,\n    breakTime: 60 * 5,\n    breakTimeLeft: 60 * 5,\n    breakTimeFloor: 60 * 1,\n    breakTimeRoof: 60 * 15,\n    isTimerRunning: false,\n    focus: true,\n    sessionStarted: false\n  }; // timer starts out initially as initTimer and changed with setTimer causing rerender\n\n  const [timer, setTimer] = useState({ ...initTimer\n  }); // useInterval is called every second when the timer is on\n\n  useInterval(() => {\n    if (timer.focusTimeLeft <= 0 || timer.breakTimeLeft <= 0) {\n      const alarm = new Audio(`https://onlineclock.net/audio/options/default.mp3`).play();\n      console.log(alarm);\n      switchModes();\n    } else {\n      if (timer.focus) {\n        timePassed(\"focusTimeLeft\");\n      } else {\n        timePassed(\"breakTimeLeft\");\n      }\n    }\n  }, timer.isTimerRunning ? 1000 : null);\n  /**\n   * if a second has passed, decrease the timer a second also\n   * @param {string} - mode - is either \"focusTimeLeft\" or \"breakTimeLeft\"\n   */\n\n  function timePassed(mode) {\n    setTimer(() => {\n      return { ...timer,\n        [mode]: timer[mode] - 1\n      };\n    });\n  }\n  /**\n   * once focusTimeLeft or breakTimeLeft reaches 0 / ends\n   * --> switch modes and reset timers\n   */\n\n\n  function switchModes() {\n    setTimer(() => {\n      return { ...timer,\n        focusTimeLeft: timer.focusTime,\n        breakTimeLeft: timer.breakTime,\n        focus: !timer.focus\n      };\n    });\n  }\n  /**\n   * Adds an extra 0 to the single digit numbers\n   * @param {number} - num - number to pad\n   * @return {number} - Padded number is returned if < 10\n   */\n\n\n  function pad(num) {\n    return num < 10 ? \"0\" + num : num;\n  }\n  /**\n   * Formats time in mm:ss\n   * @param {string} - mode - either:\n   * focusTime, focusTimeLeft, breakTime, breakTimeLeft\n   */\n\n\n  function getTime(mode) {\n    return `${pad(Math.floor(timer[mode] / 60))} :${pad(timer[mode] % 60)}`;\n  }\n  /**\n   * gets a key of the timer object\n   * @param {string} key - key of the timer object\n   */\n\n\n  function get(key) {\n    return timer[key];\n  }\n  /**\n   * Increments / Decrements Time of focus/break\n   * @param {string} mode -> Either \"focus\" or \"break\"\n   * @param {number} change -> Amount to change Time by\n   */\n\n\n  function ChangeTime(mode, change) {\n    const newTime = change < 0 ? Math.max(timer[mode + \"TimeFloor\"], timer[mode + \"Time\"] + change) : Math.min(timer[mode + \"TimeRoof\"], timer[mode + \"Time\"] + change);\n    setTimer(() => {\n      return { ...timer,\n        [mode + \"Time\"]: newTime,\n        [mode + \"TimeLeft\"]: newTime\n      };\n    });\n  }\n  /**\n   * Plays / Pauses the timer\n   */\n\n\n  function playPause() {\n    setTimer(() => {\n      return { ...timer,\n        isTimerRunning: !timer.isTimerRunning,\n        sessionStarted: true\n      };\n    });\n  }\n  /**\n   * Stops the timer, resetting it\n   */\n\n\n  function stop() {\n    setTimer(() => {\n      return { ...timer,\n        isTimerRunning: false,\n        sessionStarted: false,\n        focusTimeLeft: timer.focusTime,\n        breakTimeLeft: timer.breakTime,\n        focus: true\n      };\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Initialize, {\n    changeTime: changeTime,\n    getTime: getTime,\n    mode: \"focus\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Initialize, {\n    changeTime: changeTime,\n    getTime: getTime,\n    mode: \"break\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(StartStop, {\n    playPause: playPause,\n    get: get,\n    stop: stop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FocusTimer, {\n    getTime: getTime,\n    get: get,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Progress, {\n    get: get,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/brandon/Desktop/Thinkful/Projects/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","Initialize","StartStop","FocusTimer","Progress","Pomodoro","initTimer","focusTime","focusTimeLeft","focusTimeFloor","focusTimeRoof","breakTime","breakTimeLeft","breakTimeFloor","breakTimeRoof","isTimerRunning","focus","sessionStarted","timer","setTimer","alarm","Audio","play","console","log","switchModes","timePassed","mode","pad","num","getTime","Math","floor","get","key","ChangeTime","change","newTime","max","min","playPause","stop","changeTime"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Initialize from \"./Initialize\";\nimport StartStop from \"./StartStop\";\nimport FocusTimer from \"./FocusTimer\";\nimport Progress from \"./Progress\";\n\n/**\n * main component that represents a Pomodoro Timer\n * @returns {JSX} - <div> element containing all other components\n */\n\nfunction Pomodoro() {\n  const initTimer = {\n    focusTime: 60 * 25,\n    focusTimeLeft: 60 * 25,\n    focusTimeFloor: 60 * 5,\n    focusTimeRoof: 60 * 60,\n\n    breakTime: 60 * 5,\n    breakTimeLeft: 60 * 5,\n    breakTimeFloor: 60 * 1,\n    breakTimeRoof: 60 * 15,\n\n    isTimerRunning: false,\n    focus: true,\n    sessionStarted: false,\n  };\n\n  // timer starts out initially as initTimer and changed with setTimer causing rerender\n  const [timer, setTimer] = useState({ ...initTimer });\n\n  // useInterval is called every second when the timer is on\n  useInterval(\n    () => {\n      if (timer.focusTimeLeft <= 0 || timer.breakTimeLeft <= 0) {\n        const alarm = new Audio(\n          `https://onlineclock.net/audio/options/default.mp3`\n        ).play();\n        console.log(alarm);\n        switchModes();\n      } else {\n        if (timer.focus) {\n          timePassed(\"focusTimeLeft\");\n        } else {\n          timePassed(\"breakTimeLeft\");\n        }\n      }\n    },\n    timer.isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * if a second has passed, decrease the timer a second also\n   * @param {string} - mode - is either \"focusTimeLeft\" or \"breakTimeLeft\"\n   */\n\n  function timePassed(mode) {\n    setTimer(() => {\n      return {\n        ...timer,\n        [mode]: timer[mode] - 1,\n      };\n    });\n  }\n\n  /**\n   * once focusTimeLeft or breakTimeLeft reaches 0 / ends\n   * --> switch modes and reset timers\n   */\n\n  function switchModes() {\n    setTimer(() => {\n      return {\n        ...timer,\n        focusTimeLeft: timer.focusTime,\n        breakTimeLeft: timer.breakTime,\n        focus: !timer.focus,\n      };\n    });\n  }\n\n  /**\n   * Adds an extra 0 to the single digit numbers\n   * @param {number} - num - number to pad\n   * @return {number} - Padded number is returned if < 10\n   */\n  function pad(num) {\n    return num < 10 ? \"0\" + num : num;\n  }\n\n  /**\n   * Formats time in mm:ss\n   * @param {string} - mode - either:\n   * focusTime, focusTimeLeft, breakTime, breakTimeLeft\n   */\n  function getTime(mode) {\n    return `${pad(Math.floor(timer[mode] / 60))} :${pad(timer[mode] % 60)}`;\n  }\n\n  /**\n   * gets a key of the timer object\n   * @param {string} key - key of the timer object\n   */\n  function get(key) {\n    return timer[key];\n  }\n\n  /**\n   * Increments / Decrements Time of focus/break\n   * @param {string} mode -> Either \"focus\" or \"break\"\n   * @param {number} change -> Amount to change Time by\n   */\n  function ChangeTime(mode, change) {\n    const newTime =\n      change < 0\n        ? Math.max(timer[mode + \"TimeFloor\"], timer[mode + \"Time\"] + change)\n        : Math.min(timer[mode + \"TimeRoof\"], timer[mode + \"Time\"] + change);\n\n    setTimer(() => {\n      return {\n        ...timer,\n        [mode + \"Time\"]: newTime,\n        [mode + \"TimeLeft\"]: newTime,\n      };\n    });\n  }\n\n  /**\n   * Plays / Pauses the timer\n   */\n\n  function playPause() {\n    setTimer(() => {\n      return {\n        ...timer,\n        isTimerRunning: !timer.isTimerRunning,\n        sessionStarted: true,\n      };\n    });\n  }\n\n  /**\n   * Stops the timer, resetting it\n   */\n  function stop() {\n    setTimer(() => {\n      return {\n        ...timer,\n        isTimerRunning: false,\n        sessionStarted: false,\n        focusTimeLeft: timer.focusTime,\n        breakTimeLeft: timer.breakTime,\n        focus: true,\n      };\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <Initialize \n              changeTime={changeTime} \n              getTime={getTime} \n              mode=\"focus\" />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <Initialize\n              changeTime={changeTime}\n              getTime={getTime}\n              mode=\"break\"\n            />\n          </div>\n        </div>\n      </div>\n      <StartStop playPause={playPause} get={get} stop={stop} />\n\n      <FocusTimer getTime={getTime} get={get} />\n\n      <Progress get={get} />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}