{"version":3,"sources":["pomodoro/Initialize.js","pomodoro/StartStop.js","utils/class-names/index.js","pomodoro/FocusTimer.js","pomodoro/Progress.js","pomodoro/Pomodoro.js","utils/useInterval/index.js","App.js","index.js"],"names":["Initialize","changeTime","getTime","mode","handleChange","event","target","dataset","testid","console","log","className","data-testid","charAt","toUpperCase","slice","type","onClick","StartStop","classNameToBoolean","playPause","get","stop","role","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","disabled","FocusTimer","currMode","Progress","time","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","Pomodoro","useState","focusTime","focusTimeLeft","focusTimeFloor","focusTimeRoof","breakTime","breakTimeLeft","breakTimeFloor","breakTimeRoof","isTimerRunning","focus","sessionStarted","timer","setTimer","timePassed","pad","num","Math","floor","key","change","newTime","max","min","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","alarm","Audio","play","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbde1837.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * A component which allows the user to see and edit the focus/break max times.\n * @param {Object} props - The properties passed on to this component.\n * @param {function} props.changeTime - A function that changes the max time.\n * @param {function} props.getTime - A function that gives a time in mm:ss.\n * @param {string} props.mode - Either \"focus\" or \"break\".\n * @returns {JSX} - A <div> element containing timer info and buttons.\n */\nfunction Initialize( {changeTime, getTime, mode} ) {\n\t/**\n\t * Handles changing the max of focus/break.\n\t * @param {Event} - Button event.\n\t */\n\tfunction handleChange(event) {\n\t\tswitch(event.target.dataset.testid) {\n\t\t\tcase \"decrease-focus\": changeTime(\"focus\", 60 * -5); break;\n\t\t\tcase \"increase-focus\": changeTime(\"focus\", 60 * 5); break;\n\t\t\tcase \"decrease-break\": changeTime(\"break\", 60 * -1); break;\n\t\t\tcase \"increase-break\": changeTime(\"break\", 60 * 1); break;\n\t\t\tdefault: console.log(\"Something went wrong! @handleChange\"); break;\n\t\t}\n\t}\n\n\treturn (\n\t\t\t<div className=\"col\">\n\t\t\t\t<div className=\"input-group input-group-lg mb-2\">\n\t\t\t\t\t<span className=\"input-group-text\" data-testid={`duration-${mode}`}>\n\t\t\t\t\t\t{mode.charAt(0).toUpperCase() + mode.slice(1)} Duration: {getTime(`${mode}Time`)}\n\t\t\t\t\t</span>\n\t\t\t\t\t\n\t\t\t\t\t<div className=\"input-group-append\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclassName=\"btn btn-secondary\"\n\t\t\t\t\t\t\tdata-testid={`decrease-${mode}`}\n\t\t\t\t\t\t\tonClick={handleChange}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className=\"oi oi-minus\" />\n\t\t\t\t\t\t</button>\n\t\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tclassName=\"btn btn-secondary\"\n\t\t\t\t\t\t\tdata-testid={`increase-${mode}`}\n\t\t\t\t\t\t\tonClick={handleChange}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<span className=\"oi oi-plus\" />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t);\n}\n\nInitialize.propTypes = {\n\tchangeTime: PropTypes.func.isRequired,\n\tgetTime: PropTypes.func.isRequired,\n\tmode: PropTypes.string.isRequired,\n};\n\nexport default Initialize;","import React from \"react\";\nimport classNames from \"../utils/class-names\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Two buttons that control play, pause, and stopping the timer.\n * @param {Object} props - The properties passed on to this component.\n * @param {function} props.playPause - Turns the timer on/off.\n * @param {function} props.get - Gets a key of the timer object.\n * @param {function} props.stop - Stops the timer and resets the time left.\n * @returns {JSX} - A <div> element containing two buttons.\n */\nfunction StartStop( {playPause, get, stop} ) {\n\treturn (\n\t\t<div className=\"row\">\n      <div className=\"col\">\n        <div\n          className=\"btn-group btn-group-lg mb-2\"\n          role=\"group\"\n          aria-label=\"Timer controls\"\n        >\n          <button\n            type=\"button\"\n            className=\"btn btn-primary\"\n            data-testid=\"play-pause\"\n            title=\"Start or pause timer\"\n            onClick={playPause}\n          >\n            <span\n              className={classNames({\n                oi: true,\n                \"oi-media-play\": !get(\"isTimerRunning\"),\n                \"oi-media-pause\": get(\"isTimerRunning\"),\n              })}\n            />\n          </button>\n\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            title=\"Stop the session\"\n\t\t\t\t\t\tonClick={stop}\n\t\t\t\t\t\tdisabled={!get(\"isTimerRunning\")}\n          >\n            <span className=\"oi oi-media-stop\" />\n           </button>\n        </div>\n      </div>\n    </div>\n\t);\n}\n\nStartStop.propTypes = {\n\tplayPause: PropTypes.func.isRequired,\n\tget: PropTypes.func.isRequired,\n\tstop: PropTypes.func.isRequired,\n};\n\nexport default StartStop;","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * A component that shows the time remaining when the timer is on.\n * @param {Object} props - The properties passed on to this component.\n * @param {getTime} props.getTime - A function that gives a time in mm:ss.\n * @param {get} props.get - Gets a key of the timer object.\n * @returns {JSX} - A <div> element containing information about the timer.\n */\nfunction FocusTimer( {getTime, get} ) {\n\tif(!get(\"sessionStarted\")) return null;\n\n\tconst currMode = get(\"focus\") ? \"focus\" : \"break\";\n\t\n\treturn (\n\t\t<div className=\"row mb-2\">\n\t\t\t<div className=\"col\">\n\t\t\t\t<h2 data-testid=\"session-title\">\n\t\t\t\t\t{get(\"focus\") ? \"Focusing \" : \"On Break \"}\n\t\t\t\t\tfor {getTime(`${currMode}Time`)} minutes\n\t\t\t\t</h2>\n\t\t\t\t<p className=\"lead\" data-testid=\"session-sub-title\">\n\t\t\t\t\t{getTime(`${currMode}TimeLeft`)} remaining\n\t\t\t\t</p>\n\t\t\t\t<h3>{!get(\"isTimerRunning\") ? \"PAUSED\" : \"\"}</h3>\n\t\t\t</div>\n\t\t</div>\n\n\t);\n}\n\nFocusTimer.propTypes = {\n\tget: PropTypes.func.isRequired,\n\tgetTime: PropTypes.func.isRequired,\n};\n\nexport default FocusTimer;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * A component that shows a progress bar when the timer is on.\n * @param {Object} props - The properties passed on to this component.\n * @param {get} props.get - Gets a key of the timer object.\n * @returns {JSX} - A <div> element containing a progress bar.\n */\nfunction Progress({ get }) {\n\tif(!get(\"sessionStarted\")) return null;\n\n\tconst currMode = get(\"focus\") ? \"focus\" : \"break\";\n\tconst time = 100 - (100 * (get(`${currMode}TimeLeft`) / get(`${currMode}Time`)));\n\n\treturn (\n\t\t<div className=\"row mb-2\">\n\t\t\t<div className=\"col\">\n\t\t\t\t<div className=\"progress\" style={{ height: \"20px\" }}>\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"progress-bar\"\n\t\t\t\t\t\trole=\"progressbar\"\n\t\t\t\t\t\taria-valuemin=\"0\"\n\t\t\t\t\t\taria-valuemax=\"100\"\n\t\t\t\t\t\taria-valuenow={time}\n\t\t\t\t\t\tstyle={{ width: `${time}%` }}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nProgress.propTypes = {\n\tget: PropTypes.func.isRequired,\n};\n\nexport default Progress;","import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport Initialize from \"./Initialize\";\nimport StartStop from \"./StartStop\";\nimport FocusTimer from \"./FocusTimer\";\nimport Progress from \"./Progress\";\n\n/**\n * main component that represents a Pomodoro Timer\n * @returns {JSX} - <div> element containing all other components\n */\n\nfunction Pomodoro() {\n  const initTimer = {\n    focusTime: 60 * 25,\n    focusTimeLeft: 60 * 25,\n    focusTimeFloor: 60 * 5,\n    focusTimeRoof: 60 * 60,\n\n    breakTime: 60 * 5,\n    breakTimeLeft: 60 * 5,\n    breakTimeFloor: 60 * 1,\n    breakTimeRoof: 60 * 15,\n\n    isTimerRunning: false,\n    focus: true,\n    sessionStarted: false,\n  };\n\n  // timer starts out initially as initTimer and changed with setTimer causing rerender\n  const [timer, setTimer] = useState({ ...initTimer });\n\n  // useInterval is called every second when the timer is on\n  useInterval(\n    () => {\n      if (timer.focusTimeLeft <= 0 || timer.breakTimeLeft <= 0) {\n        const alarm = new Audio(\n          `https://onlineclock.net/audio/options/default.mp3`\n        ).play();\n        console.log(alarm);\n        switchModes();\n      } else {\n        if (timer.focus) {\n          timePassed(\"focusTimeLeft\");\n        } else {\n          timePassed(\"breakTimeLeft\");\n        }\n      }\n    },\n    timer.isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * if a second has passed, decrease the timer a second also\n   * @param {string} - mode - is either \"focusTimeLeft\" or \"breakTimeLeft\"\n   */\n\n  function timePassed(mode) {\n    setTimer(() => {\n      return {\n        ...timer,\n        [mode]: timer[mode] - 1,\n      };\n    });\n  }\n\n  /**\n   * once focusTimeLeft or breakTimeLeft reaches 0 / ends\n   * --> switch modes and reset timers\n   */\n\n  function switchModes() {\n    setTimer(() => {\n      return {\n        ...timer,\n        focusTimeLeft: timer.focusTime,\n        breakTimeLeft: timer.breakTime,\n        focus: !timer.focus,\n      };\n    });\n  }\n\n  /**\n   * Adds an extra 0 to the single digit numbers\n   * @param {number} - num - number to pad\n   * @return {number} - Padded number is returned if < 10\n   */\n  function pad(num) {\n    return num < 10 ? \"0\" + num : num;\n  }\n\n  /**\n   * Formats time in mm:ss\n   * @param {string} - mode - either:\n   * focusTime, focusTimeLeft, breakTime, breakTimeLeft\n   */\n  function getTime(mode) {\n    return `${pad(Math.floor(timer[mode] / 60))}:${pad(timer[mode] % 60)}`;\n  }\n\n  /**\n   * gets a key of the timer object\n   * @param {string} key - key of the timer object\n   */\n  function get(key) {\n    return timer[key];\n  }\n\n  /**\n   * Increments / Decrements Time of focus/break\n   * @param {string} mode -> Either \"focus\" or \"break\"\n   * @param {number} change -> Amount to change Time by\n   */\n  function changeTime(mode, change) {\n    const newTime =\n      change < 0\n        ? Math.max(timer[mode + \"TimeFloor\"], timer[mode + \"Time\"] + change)\n        : Math.min(timer[mode + \"TimeRoof\"], timer[mode + \"Time\"] + change);\n\n    setTimer(() => {\n      return {\n        ...timer,\n        [mode + \"Time\"]: newTime,\n        [mode + \"TimeLeft\"]: newTime,\n      };\n    });\n  }\n\n  /**\n   * Plays / Pauses the timer\n   */\n\n  function playPause() {\n    setTimer(() => {\n      return {\n        ...timer,\n        isTimerRunning: !timer.isTimerRunning,\n        sessionStarted: true,\n      };\n    });\n  }\n\n  /**\n   * Stops the timer, resetting it\n   */\n  function stop() {\n    setTimer(() => {\n      return {\n        ...timer,\n        isTimerRunning: false,\n        sessionStarted: false,\n        focusTimeLeft: timer.focusTime,\n        breakTimeLeft: timer.breakTime,\n        focus: true,\n      };\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <Initialize \n              changeTime={changeTime} \n              getTime={getTime} \n              mode=\"focus\" />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <Initialize\n              changeTime={changeTime}\n              getTime={getTime}\n              mode=\"break\"\n            />\n          </div>\n        </div>\n      </div>\n      <StartStop playPause={playPause} get={get} stop={stop} />\n\n      <FocusTimer getTime={getTime} get={get} />\n\n      <Progress get={get} />\n    </div>\n  );\n}\n\nexport default Pomodoro;","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}